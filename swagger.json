{
  "swagger": "2.0",
  "info": {
    "title": "My API",
    "description": "An API to manage employee and store records.",
    "version": "1.0.0"
  },
  "host": "cse341-personalproject-fcdb.onrender.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "paths": {
    "/employees/": {
      "get": {
        "description": "Retrieve a list of all employees.",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "A JSON array of employee objects."
          }
        }
      },
      "post": {
        "description": "Create a new employee record.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "FirstName": { "example": "John" },
                "LastName": { "example": "Doe" },
                "DoB": { "example": "1990-01-01" },
                "HireDate": { "example": "2020-06-15" },
                "Salary": { "example": 60000 },
                "Job": { "example": "Software Engineer" },
                "Notes": { "example": "Excellent performer" }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Employee successfully created."
          },
          "412": {
            "description": "Precondition failed due to invalid input."
          },
          "500": {
            "description": "Server error occurred while creating employee."
          }
        }
      }
    },
    "/employees/{id}": {
      "get": {
        "description": "Retrieve a specific employee's details by their ID.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique ID of the employee."
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the specified employee."
          },
          "500": {
            "description": "Server error occurred while retrieving employee details."
          }
        }
      },
      "put": {
        "description": "Update an existing employee's record by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique ID of the employee to update."
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "FirstName": { "example": "John" },
                "LastName": { "example": "Doe" },
                "DoB": { "example": "1990-01-01" },
                "HireDate": { "example": "2020-06-15" },
                "Salary": { "example": 65000 },
                "Job": { "example": "Senior Software Engineer" },
                "Notes": { "example": "Promoted recently" }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Employee record updated successfully."
          },
          "412": {
            "description": "Precondition failed due to invalid input."
          },
          "500": {
            "description": "Server error occurred while updating employee."
          }
        }
      },
      "delete": {
        "description": "Delete an employee's record by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique ID of the employee to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "Employee record deleted successfully."
          },
          "500": {
            "description": "Server error occurred while deleting employee."
          }
        }
      }
    },
    "/stores/": {
      "get": {
        "description": "Retrieve a list of all stores.",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "A JSON array of store objects."
          }
        }
      }
    },
    "/stores/{id}": {
      "get": {
        "description": "Retrieve details of a specific store by its ID.",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The unique ID of the store."
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the specified store."
          },
          "500": {
            "description": "Server error occurred while retrieving store details."
          }
        }
      }
    },
    "/api-docs": {
      "get": {
        "description": "Access the API documentation in Swagger format.",
        "responses": {
          "default": {
            "description": "The Swagger API documentation."
          }
        }
      }
    }
  }
}